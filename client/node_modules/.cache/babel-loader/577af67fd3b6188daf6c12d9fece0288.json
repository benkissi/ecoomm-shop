{"ast":null,"code":"import ShopActionTypes from './shop.types';\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); //--When using redux thunk\n// export const fetchCollectionsStartAsync = () => {\n//     return dispatch => {\n//         const collectionRef = firestore.collection('collections')\n//         dispatch(fetchCollectionsStart())\n//         //--This uses the promises pattern by using <.get> and <.then>\n//         collectionRef.get().then(snapshot => {\n//             const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n//             dispatch(fetchCollectionsSuccess(collectionsMap))\n//         }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\n//         //--This uses the observer patern by making use of <onSnapshot>\n//         // this.unsubscribeFromSnapShot = collectionRef.onSnapshot(async snapshot => {\n//         //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n//         //     updateCollections(collectionsMap)\n//         //     this.setState({loading: false})\n//         // })\n//     }\n// }","map":{"version":3,"sources":["/code/ben/ecoomm-shop/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AAGA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEF,eAAe,CAACG;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACtDH,EAAAA,IAAI,EAAEF,eAAe,CAACM,yBADgC;AAEtDC,EAAAA,OAAO,EAAEF;AAF6C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACpDP,EAAAA,IAAI,EAAEF,eAAe,CAACU,yBAD8B;AAEpDH,EAAAA,OAAO,EAAEE;AAF2C,CAAL,CAA5C,C,CAKP;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import ShopActionTypes from './shop.types'\n\n\nexport const fetchCollectionsStart = () => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_START,\n})\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n})\n\nexport const fetchCollectionsFailure = errorMessage => ({\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n    payload: errorMessage\n})\n\n//--When using redux thunk\n// export const fetchCollectionsStartAsync = () => {\n//     return dispatch => {\n//         const collectionRef = firestore.collection('collections')\n//         dispatch(fetchCollectionsStart())\n\n//         //--This uses the promises pattern by using <.get> and <.then>\n//         collectionRef.get().then(snapshot => {\n//             const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n//             dispatch(fetchCollectionsSuccess(collectionsMap))\n//         }).catch(error => dispatch(fetchCollectionsFailure(error.message)))\n\n//         //--This uses the observer patern by making use of <onSnapshot>\n//         // this.unsubscribeFromSnapShot = collectionRef.onSnapshot(async snapshot => {\n//         //     const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\n//         //     updateCollections(collectionsMap)\n//         //     this.setState({loading: false})\n//         // })\n//     }\n// }"]},"metadata":{},"sourceType":"module"}